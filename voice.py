from vosk import Model, KaldiRecognizer
import speech_recognition
import wave
import json
import os
import threading
import queue
import flet as ft
import time

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ–º–∞–Ω–¥
command_queue = queue.Queue()
is_listening = False
listening_thread = None

def say_hello(*args):
    print("Hello! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!")
    return "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!"

def show_time(*args):
    current_time = time.strftime("%H:%M:%S")
    message = f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}"
    print(message)
    return message

def unknown_command(*args):
    message = "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
    print(message)
    return message

# –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
commands = {
    "–ø—Ä–∏–≤–µ—Ç": say_hello,
    "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π": say_hello,
    "hello": say_hello,
    "—Å–∫–∞–∂–∏ –≤—Ä–µ–º—è": show_time,
    "–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å": show_time,
    "–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç": lambda *args: "–í–∫–ª—é—á–∞—é —Å–≤–µ—Ç!",
    "–≤—ã–∫–ª—é—á–∏ —Å–≤–µ—Ç": lambda *args: "–í—ã–∫–ª—é—á–∞—é —Å–≤–µ—Ç!",
    "—Å–æ–∑–¥–∞–π –∑–∞–º–µ—Ç–∫—É": lambda *args: f"–°–æ–∑–¥–∞—é –∑–∞–º–µ—Ç–∫—É: {' '.join(args[0]) if args[0] else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}",
}

def find_matching_command(voice_input):
    """
    –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑–µ
    """
    voice_input = voice_input.lower().strip()
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    for command in sorted(commands.keys(), key=len, reverse=True):
        if voice_input.startswith(command):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            remaining_text = voice_input[len(command):].strip()
            params = remaining_text.split() if remaining_text else []
            return command, params
    
    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    first_word = voice_input.split()[0] if voice_input.split() else ""
    for command in commands.keys():
        if command.startswith(first_word) or first_word in command:
            remaining_text = voice_input[len(first_word):].strip()
            params = remaining_text.split() if remaining_text else []
            return command, params
    
    return None, []

def record_and_recognize_audio():
    """
    –ó–∞–ø–∏—Å—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
    """
    recognizer = speech_recognition.Recognizer()
    microphone = speech_recognition.Microphone()
    
    with microphone:
        recognized_data = ""

        # —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–∫—Ä—É–∂–∞—é—â–µ–≥–æ —à—É–º–∞
        recognizer.adjust_for_ambient_noise(microphone, duration=2)

        try:
            print("Listening...")
            audio = recognizer.listen(microphone, 5, 5)

            with open("microphone-results.wav", "wb") as file:
                file.write(audio.get_wav_data())

        except speech_recognition.WaitTimeoutError:
            print("Can you check if your microphone is on, please?")
            return ""

        # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ online-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Google 
        try:
            print("Started recognition...")
            recognized_data = recognizer.recognize_google(audio, language="ru").lower()

        except speech_recognition.UnknownValueError:
            pass

        # –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç—É–ø–æ–º –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–ø—ã—Ç–∫–∞ 
        # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å offline-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Vosk
        except speech_recognition.RequestError:
            print("Trying to use offline recognition...")
            recognized_data = use_offline_recognition()

        return recognized_data

def use_offline_recognition():
    """
    –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
    :return: —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞
    """
    recognized_data = ""
    try:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if not os.path.exists("models/vosk-model-small-ru-0.4"):
            print("Please download the model from:\n"
                  "https://alphacephei.com/vosk/models and unpack as 'model' in the current folder.")
            return ""

        # –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∞—É–¥–∏–æ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ñ—Ä–∞–∑—ã)
        wave_audio_file = wave.open("microphone-results.wav", "rb")
        model = Model("models/vosk-model-small-ru-0.4")
        offline_recognizer = KaldiRecognizer(model, wave_audio_file.getframerate())

        data = wave_audio_file.readframes(wave_audio_file.getnframes())
        if len(data) > 0:
            if offline_recognizer.AcceptWaveform(data):
                recognized_data = offline_recognizer.Result()

                # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ JSON-—Å—Ç—Ä–æ–∫–∏
                # (—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–¥–∞—Ç—å –ø–æ –Ω–µ–π –æ—Ç–≤–µ—Ç)
                recognized_data = json.loads(recognized_data)
                recognized_data = recognized_data["text"]
    except:
        print("Sorry, speech service is unavailable. Try again later")

    return recognized_data

def execute_command_with_name(full_command: str, params: list):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    """
    if full_command in commands:
        result = commands[full_command](params)
        return result
    else:
        return unknown_command()

def listening_worker():
    """
    –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    """
    global is_listening
    while is_listening:
        try:
            voice_input = record_and_recognize_audio()
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists("microphone-results.wav"):
                os.remove("microphone-results.wav")
            
            if voice_input and voice_input.strip():
                print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {voice_input}")
                
                # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑–µ
                command, params = find_matching_command(voice_input)
                
                if command:
                    # –ü–æ–º–µ—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å
                    command_queue.put((command, params, voice_input))
                else:
                    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–º–µ—â–∞–µ–º –≤—Å—é —Ñ—Ä–∞–∑—É –∫–∞–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                    command_queue.put(("unknown", [voice_input], voice_input))
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")

def start_voice_listening():
    """
    –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    """
    global is_listening, listening_thread
    
    if is_listening:
        print("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
        return
    
    is_listening = True
    listening_thread = threading.Thread(target=listening_worker)
    listening_thread.daemon = True
    listening_thread.start()
    print("–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...")

def stop_voice_listening():
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    """
    global is_listening
    
    is_listening = False
    print("–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

def process_voice_commands():
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    –í—ã–∑—ã–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    """
    processed_count = 0
    results = []
    while not command_queue.empty():
        try:
            command, params, original_phrase = command_queue.get_nowait()
            
            if command == "unknown":
                result = unknown_command(params)
            else:
                result = execute_command_with_name(command, params)
            
            results.append({
                "command": command,
                "original_phrase": original_phrase,
                "result": result,
                "timestamp": time.strftime("%H:%M:%S")
            })
            
            command_queue.task_done()
            processed_count += 1
            
        except queue.Empty:
            break
    
    return processed_count, results

# Flet UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
def main(page: ft.Page):
    page.title = "–ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"
    page.theme_mode = ft.ThemeMode.LIGHT
    
    # –≠–ª–µ–º–µ–Ω—Ç—ã UI
    status_text = ft.Text("–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ", size=16)
    log_output = ft.Column(scroll=ft.ScrollMode.ALWAYS, height=300)
    
    def update_status(message):
        status_text.value = message
        page.update()
    
    def add_log(message, color=None):
        log_entry = ft.Text(message, color=color) if color else ft.Text(message)
        log_output.controls.append(log_entry)
        if len(log_output.controls) > 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–æ–≥
            log_output.controls.pop(0)
        page.update()
    
    def start_listening(e):
        start_voice_listening()
        update_status("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ...")
        add_log("–ó–∞–ø—É—â–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", ft.colors.GREEN)
    
    def stop_listening(e):
        stop_voice_listening()
        update_status("–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
        add_log("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", ft.colors.RED)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tabs = ft.Tabs(
        selected_index=0,
        animation_duration=300,
        tabs=[
            ft.Tab(
                text="–ì–ª–∞–≤–Ω–∞—è",
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã", size=20, weight=ft.FontWeight.BOLD),
                        ft.Text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:", size=16, weight=ft.FontWeight.BOLD),
                        ft.Text("‚Ä¢ –ø—Ä–∏–≤–µ—Ç / –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π / hello"),
                        ft.Text("‚Ä¢ —Å–∫–∞–∂–∏ –≤—Ä–µ–º—è / –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å"),
                        ft.Text("‚Ä¢ –≤–∫–ª—é—á–∏ —Å–≤–µ—Ç / –≤—ã–∫–ª—é—á–∏ —Å–≤–µ—Ç"),
                        ft.Text("‚Ä¢ —Å–æ–∑–¥–∞–π –∑–∞–º–µ—Ç–∫—É [—Ç–µ–∫—Å—Ç]"),
                        ft.Divider(),
                        status_text,
                    ]),
                    padding=20
                )
            ),
            ft.Tab(
                text="–õ–æ–≥ –∫–æ–º–∞–Ω–¥",
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("–õ–æ–≥ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥", size=20, weight=ft.FontWeight.BOLD),
                        ft.Container(
                            content=log_output,
                            border=ft.border.all(1),
                            padding=10,
                            border_radius=5,
                            height=250
                        )
                    ]),
                    padding=20
                )
            ),
        ],
        expand=1,
    )
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    start_button = ft.ElevatedButton(
        "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å",
        icon=ft.Icons.MIC,
        on_click=start_listening,
        bgcolor=ft.Colors.GREEN_200
    )
    
    stop_button = ft.ElevatedButton(
        "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
        icon=ft.Icons.STOP,
        on_click=stop_listening,
        bgcolor=ft.Colors.RED_200
    )
    
    # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    page.add(
        ft.Column([
            ft.Row([start_button, stop_button]),
            ft.Divider(),
            tabs
        ], expand=True)
    )
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
    def process_commands_periodically():
        while True:
            try:
                processed_count, results = process_voice_commands()
                if processed_count > 0:
                    for result in results:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
                        log_message = f"[{result['timestamp']}] üí¨ '{result['original_phrase']}' ‚Üí {result['result']}"
                        page.run_task(lambda msg=log_message: add_log(msg, ft.colors.BLUE))
                
                time.sleep(0.5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—â–µ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ: {e}")
                time.sleep(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    processing_thread = threading.Thread(target=process_commands_periodically, daemon=True)
    processing_thread.start()

if __name__ == "__main__":
    ft.app(target=main)